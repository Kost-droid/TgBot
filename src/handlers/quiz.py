from src.utils.quiz_ai import list_themas
from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from src.keyboards.coreer_keyboards import make_row_keyboard
from aiogram.types import ReplyKeyboardRemove
from src.utils.quiz_ai import QuestsAI
from src.keyboards.keyboards import kb1
from src.exception_handlers.my_exception import MyException



router = Router()

quests_ai = QuestsAI()

class CareerChoice(StatesGroup):
    choice_thema = State()
    await_answer = State()
    next_quest = State()


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞
@router.message(F.text == '–í–∏–∫—Ç–æ—Ä–∏–Ω–∞')
async def command_random(message: Message, state: FSMContext):
    await message.answer(text= '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É!', reply_markup= make_row_keyboard(list_themas, 3))
    await state.set_state(CareerChoice.choice_thema)


# –ø–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –ò–ò –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–µ–º—É
@router.message(CareerChoice.choice_thema, F.text.in_(list_themas))
async def get_quest_from_ai(message: Message, state: FSMContext):
    quests_ai.set_subject(message.text)
    try:
        await message.answer(text= quests_ai.get_guest(), reply_markup= ReplyKeyboardRemove())
    except MyException:
        await mistake(message, state)
    else:
        await state.set_state(CareerChoice.await_answer)

# –µ—Å–ª–∏ —Ç–µ–º–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–º—É —Å–ø–∏—Å–∫—É –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞ –≤—ã–±–æ—Ä —Ç–µ–º—ã
@router.message(CareerChoice.choice_thema)
async def incorrect_thema(message: Message, state: FSMContext):
    await command_random(message, state)


@router.message(CareerChoice.await_answer)
async def get_check_from_ai(message: Message, state: FSMContext):
    try:
        await message.answer(text= quests_ai.get_check_answer(message.text),
                             reply_markup= make_row_keyboard(['–ï—â–µ –≤–æ–ø—Ä–æ—Å', '–°–º–µ–Ω–∏—Ç—å —Ç–µ–º—É', '–°—Ç–æ–ø'], 3))
    except MyException:
        await  mistake(message, state)
    else:
        await state.set_state(CareerChoice.next_quest)


@router.message(CareerChoice.next_quest, F.text == '–°–º–µ–Ω–∏—Ç—å —Ç–µ–º—É')
async def other_topic(message: Message, state: FSMContext):
    await command_random(message, state)


@router.message(CareerChoice.next_quest, F.text == '–ï—â–µ –≤–æ–ø—Ä–æ—Å')
async def next_quest(message: Message, state: FSMContext):
    try:
        await message.answer(text=quests_ai.get_guest(), reply_markup=ReplyKeyboardRemove())
    except MyException:
        await mistake(message, state)
    else:
        await state.set_state(CareerChoice.await_answer)


@router.message(CareerChoice.next_quest, F.text == '–°—Ç–æ–ø')
async def stop_quest(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(text='–î–æ —Å–≤–∏–¥–∞–Ω–∏—è !', reply_markup= kb1)


# –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
async def mistake(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! üòä", reply_markup=kb1)