from src.utils.random_fact import get_fact
from aiogram import Router, F
from aiogram.types import Message, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from src.keyboards.coreer_keyboards import make_row_keyboard
from src.keyboards.keyboards import kb1
from src.exception_handlers.my_exception import MyException


router = Router()


class CareerChoice(StatesGroup):
    random_facts = State()


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Ñ–∞–∫—Ç—ã
@router.message(F.text == '–§–∞–∫—Ç—ã')
async def command_random(message: Message, state: FSMContext):
    try:
        fact = get_fact()
        await message.answer_photo(FSInputFile(fact[0]))
        await message.answer(text= fact[1], reply_markup= make_row_keyboard(['–ï—â–µ —Ñ–∞–∫—Ç', '–°—Ç–æ–ø'], 2))
    except MyException:
        await mistake(message, state)
    except Exception as error:
        MyException()
        await mistake(message, state)
    else:
        await state.set_state(CareerChoice.random_facts)
    

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ï—â–µ —Ñ–∞–∫—Ç
@router.message(CareerChoice.random_facts, F.text == '–ï—â–µ —Ñ–∞–∫—Ç')
async def next_fact(message: Message, state: FSMContext):
    await command_random(message, state)


@router.message(CareerChoice.random_facts, F.text == '–°—Ç–æ–ø')
async def stop_fact(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(text='–î–æ —Å–≤–∏–¥–∞–Ω–∏—è !', reply_markup= kb1)


# –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
async def mistake(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! –ü–æ—á–∏—Ç–∞–π—Ç–µ –ø–æ–∫–∞ –∫–Ω–∏–≥—É üòé!", reply_markup=kb1)

